-What is the tagless access buffer?
 *A small buffer placed at the top of the memory hierarchy
 *Holds a few lines from the L1D (inclusive)
 *Data explicitly directed from the L1D to the TAB by compiler generated instructions
 *Compiler looks in loops for references with constant strides or invariant
  addresses to direct to the TAB
 *QUICK description!
-What problem does it solve?
 *Energy efficiency is a major design constraint in processors
 *Cache accounts for up to 25% of a processor's total power draw
  (only if references can easily be added?)
 *TAB reduces overall cache energy usage
  +TAB uses less energy than the L1D because it is:
   #Smaller
   #Requires Far fewer DTLB accesses
   #Requires no tag check
 *Not too many details
-Why use references with constant stride or invariant address
 *We can calculate the following reference's address if the loop reference has
  a constant stride throughout the loop or if the address doesn't change.
 *Before the line is needed, we can prefetch the next line so it is available
  before it is accessed again.
 *No need to check tags since we can guarantee with prefetching that the TAB 
  entry has the line we need 
-TAB instructions
 *Two instructions control the TAB
  +gtab links a register to a TAB entry
   #once active, references with that base register will be directed to the TAB
   #gtab prefetches the line needed by the first TAB reference
   #Further prefetches are performed automatically when needed and keep the
    line data valid for the TAB references.
  +rtabs removes the register link and deallocates the TAB
 *Both instructions use the same opcode; distinguished by a bit
  +Maybe image here?
X*Once you have enough information, talk about the changes to TAB
X*We may need to talk about the "updated" part much later so people understand
X the changes!
-Example TAB instruction generation (use figure 2.3)
 *Show original loop, "Simple summation"
 *Show RTLs without TAB instructions:
 *Show RTLs with TAB instructions: 
 *SHOULD show the prefetch image SOMEWHERE at least, but maybe wait until the
  prefetch section
-TAB hardware (description)
 *TAB itself to hold 4 lines from the L1D
 *Metadata structure for TAB and line metadata
 *4 entry register array stores the base register associated with each TAB
 *Valid window structure to indicate TAB validity per function call
-TAB hardware (image)
 *Use the hardware overview image 3.1
-TAB hardware (ID stage description)
 *Include the left side of hardware graphic
 *Memory references compare the base register number against each TAB
 associated register number in parallel
 *If any match AND the matching TAB is valid (AND bits from comparison and valid
 windows), direct that reference to the associated TAB
 *If none match, go to L1D
-General metadata (description and right side image)
 *show the metadata and buffer section of the image
 *Separate metadata for TAB entry and TAB line
  +Not necessarily a one to one relationship between TAB entries and TAB lines
 *Line and line metadata accessed through index field from TAB entry
 *Level of indirection between the TAB entry and TAB lines allows multiple
 TABs to share the same line
-TAB metadata (show actual tab metadata structure)
 *TAB metadata stores information about prefetching, the access type, and which line in
  the buffer it is using
  +access type helps save energy by stopping certain unnecessary line transfers
  +prefetch type and prefetch PC give information about how and when to
  prefetch
  +index and extra line indicate the TAB line associated with the TAB and
   how many lines the TAB is using (one or two)
-Line metadata (show actual line metadata structure)
 *Line metadata stores information which allows quick L1D access for writebacks
  and interferences
  +line number and way indicate the exact L1D location
  of the line
  +Physical page number removes the need to check the DTLB
  +includes a write mask so only dirty bytes are written back to l1d
-ISA modifications
 *Only requires one extra opcode: gtab and rtabs instructions are differentiated
  by a separate one bit field
 *Many fields in gtab get stored in metadata
  +base register stored in register array
  +stride is left shifted by the value in shift size to give the actual stride
  +L/S is the prefetch type
  +Prefetch offset is multiplied by the instruction byte width and added to the
  current PC to produce the prefetch PC metadata field
 *rtabs release field is a bitfield indicating which TAB entries to deallocate
-Required L1D changes
 *Each line in L1D extended with 2 bits: a T and I bit
 *T bit indicates if line resides in a TAB. When L1D evictions occur, this is
 used to invalidate the TAB line
 *I bit indicates if references to this line should go to the TAB for the most
 recent data, called an "interference"
 *Interferences require an extra cycle to get the data from the TAB
 *The I bit saves energy and execution time; 
  +Many lines that reside in the TAB are guaranteed not to cause interferences, 
   so it is a waste to go to the TAB
-TAB Operations
 *gtab instruction allocates a TAB
  +Deallocates existing TAB entry (if valid)
  +updates register array to associate base register with TAB
  +prefetches first line to be accessed by TAB references
  +marks entry as valid
 *rtabs instruction deallocates one or more TABs
  +bitfield in rtabs states TABs to deallocate
  +Only flush dirty bytes when deallocating
  +remove register association
-Prefetching
 *Include prefetch image here
 *TAB assumes it has the proper line at all times
 *Can calculate the next TAB reference's address using stride information
 *If next reference crosses line boundary, prefetch the next line now
 *Since address is always known and physical page number is stored, tag checks
 and DTLB lookups are usually unnecessary
  +DTLB will be accessed on gtab or when a page boundary is crossed
-More prefetching
 *Not all TAB references should check for prefetch
  +Can't prefetch in conditionally executed code
  +Shouldn't prefetch if future references use old line
  +Some prefetch checks are wasteful
 *TAB references must fit into a prefetch scheme:
  +All loads, all stores, all loads and stores, or a single instruction can
  cause a prefetch
  +If single instruction, check PC of reference 
 *Only check for prefetch when indicated by the scheme
 *If TAB references don't fit the scheme, compiler can't allocate TAB
-Extra line
 *Sometimes a TAB may require two lines instead of just one
  +TAB references may be accessed out of order, making prefetching impossible
  +Extra line solves this by allowing us to prefetch back and forth between two
  lines, keeping the old line for references that need it
 *TAB references use the next high order bit after the line number to determine
 which TAB line to access
 *Each line keeps track of prefetching and line metadata individually
 *When an extra line is used, one less TAB entry can be allocated
-Supporting function calls
 *Can't keep TAB across function calls
  +base registers used in caller loop may be reused for different references in
  callee
 *Shouldn't just deallocate all TABs on a function call (inefficient)
 *Use a window system to keep track of validity per call
  +Each function call has its own set of TAB validity bits
  +All TABs are marked invalid in new windows, other window validity is kept
  intact
  +A TAB can only be valid in one window/function call at a time
  +Allocating a TAB in a new window deallocates the TAB for previous windows
-Supporting function calls 2
 *Include some kind of image? The window example probably
 *Since old TABs appears invalid on calls, references are directed to L1D
 appropriately
 *All other TAB data is kept intact on function calls, only validity is changed
 *If function call does not use a TAB, it can stay valid for the caller
 *If a caller TAB is used in the callee, the caller can no longer use it when
 the callee returns
-Compiler analysis
 *No interprocedural analysis or code transformations
 *Compiler must know TAB buffer line size and line count
 *Compiler detects memory references with constant strides or with loop
 invariant addresses
 *If references fit TAB constraints, compiler can generate a gtab in the loop
 preheader and an rtabs in the postheader
-TAB allocation constraints
 *TAB references must all have the same base register
 *No other references may use the TAB's base register while it is active
 *TAB references must fit in a line and average more than 1 reference per line
 *TAB references must fit one of the prefetch schemes and cannot require a
 prefetch in conditionally executed code
 *TAB references must all be in the same loop
 *Each TAB reference must have the same constant stride
 *Maximum distance between any two TAB references is no more than the line size
-Allocation heuristics
 *We can't allocate all potential TABs: in our case, we can have four at one
 time
 *If we have more TABs than we know what to do with, we use a heuristic to
 select the ones which may save the most energy.
 *Rate each TAB reference based on estimated saved L1D accesses, then find the 
 TABs with the most overall.
-Allocation heuristics continued
 *Each reference starts with 1 saved L1D access
 *References in conditionally executed code are halved
 *References in inner loops are increased based on depth
 *Add all TAB reference values to get overall saved accesses
 *Subtract required L1D accesses per loop (both loads and stores)
  -Prefetches require a load and store; frequency based on stride
 *Divide overall saved accesses by 2 if using an extra line
 *Include equation here?
-Allocation example
 *Use image example 5.4
-Avoiding unnecessary data transfers
 *Compiler controlled TAB means access patterns can be exploited to further
 reduce energy
 *Write mask can create a read-only TAB with no L1D writes
 *TAB's "Type" metadata field can indicate write first and write contiguous
  +Write first: TAB always writes bytes before reading. Don't pull line
  from L1D
  +Write contiguous: All bytes in TAB line are written before reading. Don't
  pull line from L1D or L2D
 *Use figure 6.1
-Compare with original
 *Original
  +Required bits from loads and stores to indicate TAB and 2 opcodes
   #Not backwards compatible 
   #Loads and stores lose part of their immediate field
  +Did not link base register to TAB
   #TABs could have multiple registers
   #TABs could stay active across function calls
 *New
  +Does not require any ISA changes beyond 1 extra opcode
   #Backwards compatible with existing code
  +Requires extra hardware due to base register association 
   #Captures less references due to more strict requirements
   #Can't keep TABs valid on function calls; must have separate validity per
   call
-Benchmarking
 *Use 20 benchmarks and large datasets from MiBench suite
 *Compile benchmarks with VPO compiler
 *Simulate in order five stage pipeline with SimpleScalar
 *32 byte L1D lines, 4 TAB lines, 16kB L1D
 *Energy estimates from accurate 65nm CMOS library models using Synopsys Design
 Compiler
-Benchmarking (image)
 *Table 7.2 and 7.3?
-How well does it work? 
 *Results
-Conclusion
 *TAB does stuff blah blah blah

